// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username_of_user,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING username_of_user, hashed_password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	UsernameOfUser string `json:"usernameOfUser"`
	HashedPassword string `json:"hashedPassword"`
	FullName       string `json:"fullName"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UsernameOfUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.UsernameOfUser,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username_of_user, hashed_password, full_name, email, password_changed_at, created_at FROM users
WHERE username_of_user = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, usernameOfUser string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, usernameOfUser)
	var i User
	err := row.Scan(
		&i.UsernameOfUser,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
